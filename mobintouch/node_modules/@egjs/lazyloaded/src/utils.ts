import { ArrayFormat, InnerSizeType, ClientSizeType, ScrollSizeType, OffsetSizeType } from "./types";

import { SUPPORT_ADDEVENTLISTENER, SUPPORT_COMPUTEDSTYLE } from "./consts";

export function getAttribute(el: HTMLElement, name: string) {
  return el.getAttribute(name) || "";
}

export function toArray<T>(arr: ArrayFormat<T>): T[] {
  return [].slice.call(arr);
}
export function isDataAttribute(target: HTMLElement, prefix: string = "data-"): boolean {
  return !!target.getAttribute(`${prefix}width`);
}
export function addEvent(
  element: Element | Window,
  type: string,
  handler: (...args: any[]) => void,
) {
  if (SUPPORT_ADDEVENTLISTENER) {
    element.addEventListener(type, handler, false);
  } else if ((element as any).attachEvent) {
    (element as any).attachEvent(`on${type}`, handler);
  } else {
    (element as any)[`on${type}`] = handler;
  }
}
export function removeEvent(
  element: Element | Window,
  type: string,
  handler: (...args: any[]) => void,
) {
  if (element.removeEventListener) {
    element.removeEventListener(type, handler, false);
  } else if ((element as any).detachEvent) {
    (element as any).detachEvent(`on${type}`, handler);
  } else {
    (element as any)[`on${type}`] = null;
  }
}

export function innerWidth(el: HTMLElement) {
  return getSize(el, "Width");
}
export function innerHeight(el: HTMLElement) {
  return getSize(el, "Height");
}
export function getStyles(el: Element) {
  return (SUPPORT_COMPUTEDSTYLE ?
    window.getComputedStyle(el) : (el as any).currentStyle) || {};
}
function getSize(el: HTMLElement, name: "Width" | "Height") {
  const size = el[`client${name}` as ClientSizeType] || el[`offset${name}` as OffsetSizeType];

  return parseFloat(size || getStyles(el)[name.toLowerCase()]) || 0;
}
