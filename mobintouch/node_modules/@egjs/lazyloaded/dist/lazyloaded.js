/*
Copyright (c) 2017 NAVER Corp.
@egjs/lazyloaded JavaScript library
@egjs/lazyloaded project is licensed under the MIT license


@version 0.0.2
*/
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@egjs/component')) :
  typeof define === 'function' && define.amd ? define(['exports', '@egjs/component'], factory) :
  (global = global || self, factory((global.eg = global.eg || {}, global.eg.LazyLoaded = {}), global.eg.Component));
}(this, function (exports, Component) { 'use strict';

  var isWindow = typeof window !== "undefined";
  var ua = isWindow ? window.navigator.userAgent : "";
  var SUPPORT_COMPUTEDSTYLE = isWindow ? !!("getComputedStyle" in window) : false;
  var IS_IE = /MSIE|Trident|Windows Phone|Edge/.test(ua);
  var SUPPORT_ADDEVENTLISTENER = isWindow ? !!("addEventListener" in document) : false;
  var WIDTH = "width";
  var HEIGHT = "height";

  function getAttribute(el, name) {
    return el.getAttribute(name) || "";
  }
  function toArray(arr) {
    return [].slice.call(arr);
  }
  function isDataAttribute(target, prefix) {
    if (prefix === void 0) {
      prefix = "data-";
    }

    return !!target.getAttribute(prefix + "width");
  }
  function addEvent(element, type, handler) {
    if (SUPPORT_ADDEVENTLISTENER) {
      element.addEventListener(type, handler, false);
    } else if (element.attachEvent) {
      element.attachEvent("on" + type, handler);
    } else {
      element["on" + type] = handler;
    }
  }
  function removeEvent(element, type, handler) {
    if (element.removeEventListener) {
      element.removeEventListener(type, handler, false);
    } else if (element.detachEvent) {
      element.detachEvent("on" + type, handler);
    } else {
      element["on" + type] = null;
    }
  }
  function innerWidth(el) {
    return getSize(el, "Width");
  }
  function innerHeight(el) {
    return getSize(el, "Height");
  }
  function getStyles(el) {
    return (SUPPORT_COMPUTEDSTYLE ? window.getComputedStyle(el) : el.currentStyle) || {};
  }

  function getSize(el, name) {
    var size = el["client" + name] || el["offset" + name];
    return parseFloat(size || getStyles(el)[name.toLowerCase()]) || 0;
  }

  var elements = [];
  function add(element, prefix) {
    !elements.length && addEvent(window, "resize", resizeAll);
    element.__PREFIX__ = prefix;
    elements.push(element);
    resize(element);
  }
  function remove(element, prefix) {
    var index = elements.indexOf(element);

    if (index < 0) {
      return;
    }

    var fixed = getAttribute(element, prefix + "fixed");
    delete element.__PREFIX__;
    element.style[fixed === HEIGHT ? WIDTH : HEIGHT] = "";
    elements.splice(index, 1);
    !elements.length && removeEvent(window, "resize", resizeAll);
  }

  function resize(element, prefix) {
    if (prefix === void 0) {
      prefix = "data-";
    }

    var elementPrefix = element.__PREFIX__;

    if (typeof elementPrefix !== "string") {
      elementPrefix = prefix;
    }

    var dataWidth = parseInt(getAttribute(element, "" + elementPrefix + WIDTH), 10) || 0;
    var dataHeight = parseInt(getAttribute(element, "" + elementPrefix + HEIGHT), 10) || 0;
    var fixed = getAttribute(element, elementPrefix + "fixed");

    if (fixed === HEIGHT) {
      var size = innerHeight(element) || dataHeight;
      element.style[WIDTH] = dataWidth / dataHeight * size + "px";
    } else {
      var size = innerWidth(element) || dataWidth;
      element.style[HEIGHT] = dataHeight / dataWidth * size + "px";
    }
  }

  function resizeAll() {
    elements.forEach(function (element) {
      resize(element);
    });
  }

  /**
   * @namespace eg.LazyLoaded
   */

  /**
   * This module is used to wait for images or videos to load.
   * @ko 이 모듈은 이미지 또는 비디오 로딩을 대기할 수 있습니다.
   * @memberof eg.LazyLoaded
   * @param -
   * @example
   * ## HTML
   * ```html
   * <div>
   *    <img src="./1.jpg" data-width="1280" data-height="853" style="width:100%"/>
   *    <img src="./2.jpg">
   *    <img src="./3.jpg">
   *    <img src="./4.jpg">
   *    <img src="ERR">
   *    <img src="./6.jpg">
   *    <img src="./7.jpg">
   *    <img src="ERR">
   * </div>
   * ```
   * ## Javascript
   * ```js
   * import {check} from "@egjs/lazyloaded";
   *
   * eg.LazyLoaded.check([document.querySelector("div")]).on({
   *   ready: () => console.log("ready"),
   *   finish: () => console.log("finish"),
   *   error: e => console.log("error", e),
   * });
   * ```
   */

  function check(elements, prefix) {
    if (prefix === void 0) {
      prefix = "data-";
    }

    var component = new Component();
    var finishCount = 0;
    var readyCount = 0;

    function checkReady() {
      if (--readyCount !== 0) {
        return;
      }
      /**
       * An event occurs when the size of all images is available.
       * @ko 모든 이미지의 사이즈를 구할 수 있는 상태가 된 경우 이벤트가 발생한다.
       * @event eg.LazyLoaded#ready
       * @example
       * ```html
       * <div>
       *    <img src="./1.jpg" data-width="1280" data-height="853" style="width:100%"/>
       *    <img src="./2.jpg"/>
       *    <img src="ERR"/>
       * </div>
       * ```
       * ## Javascript
       * ```js
       * import {check} from "@egjs/lazyloaded";
       *
       * eg.LazyLoaded.check([document.querySelector("div")]).on({
       *   ready: () => console.log("ready"),
       * });
       * ```
       */


      component.trigger("ready");
    }

    function checkFinish() {
      if (--finishCount !== 0) {
        return;
      }
      /**
       * An event occurs when all images have been completed loading.
       * @ko 모든 이미지가 로딩이 완료된 상태가 된 경우 이벤트가 발생한다.
       * @event eg.LazyLoaded#finish
       * @example
       * ```html
       * <div>
       *    <img src="./1.jpg" data-width="1280" data-height="853" style="width:100%"/>
       *    <img src="./2.jpg"/>
       *    <img src="ERR"/>
       * </div>
       * ```
       * ## Javascript
       * ```js
       * import {check} from "@egjs/lazyloaded";
       *
       * eg.LazyLoaded.check([document.querySelector("div")]).on({
       *   finish: () => console.log("finish"),
       * });
       * ```
       */


      component.trigger("finish");
    }

    elements.forEach(function (el, i) {
      var tagName = el.tagName;

      if (isDataAttribute(el, prefix) && tagName !== "IMG") {
        add(el, prefix);
        ++finishCount;
        setTimeout(function () {
          check(toArray(el.querySelectorAll("img")), prefix).on("finish", function () {
            remove(el, prefix);
            checkFinish();
          });
        });
        return;
      }

      var images = tagName === "IMG" ? [el] : toArray(el.querySelectorAll("img"));

      if (!images.length) {
        return;
      }

      images.forEach(function (img, j) {
        if (img.complete && (!IS_IE || IS_IE && img.naturalWidth)) {
          if (!img.naturalWidth) {
            setTimeout(function () {
              component.trigger("error", {
                itemTarget: el,
                itemIndex: i,
                target: img,
                index: j
              });
            });
          }

          return;
        }

        if (isDataAttribute(img, prefix)) {
          add(img, prefix);
        } else {
          ++readyCount;
        }

        ++finishCount;

        function onError() {
          /**
           * An event occurs if the image fails to load.
           * @ko 이미지가 로딩에 실패하면 이벤트가 발생한다.
           * @event eg.LazyLoaded#error
           * @param {object} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>
           * @param {HTMLElement} [e.itemTarget] - The item's element with error images.<ko>오류난 이미지가 있는 아이템의 엘리먼트</ko>
           * @param {number} [e.itemindex] - The item's index with error images. <ko>오류난 이미지가 있는 아이템의 인덱스</ko>
           * @param {HTMLElement} [e.target] - Error image element <ko>오류난 이미지 엘리먼트</ko>
           * @param {number} [e.index] - Error image index <ko>오류난 이미지의 인덱스</ko>
           * @example
           * ```html
           * <div>
           *    <img src="./1.jpg" data-width="1280" data-height="853" style="width:100%"/>
           *    <img src="./2.jpg"/>
           *    <img src="ERR"/>
           * </div>
           * ```
           * ## Javascript
           * ```js
           * import {check} from "@egjs/lazyloaded";
           *
           * eg.LazyLoaded.check([document.querySelector("div")]).on({
           *   error: e => {
           *     // <div>...</div>, 0, <img src="ERR"/>, 2
           *     console.log(e.itemTarget, e.itemIndex, e.target, e.index),
           *   },
           * });
           * ```
           */
          component.trigger("error", {
            itemTarget: el,
            itemIndex: i,
            target: img,
            index: j
          });
        }

        function onCheck(e) {
          var target = e.target || e.srcElement;
          removeEvent(target, "error", onCheck);
          removeEvent(target, "load", onCheck);

          if (isDataAttribute(target, prefix)) {
            remove(target, prefix);
          } else {
            checkReady();
          }

          if (e.type === "error") {
            onError();
          }

          checkFinish();
        }

        addEvent(img, "load", onCheck);
        addEvent(img, "error", onCheck);
        IS_IE && img.setAttribute("src", img.getAttribute("src"));
      });
    });
    !readyCount && setTimeout(function () {
      component.trigger("ready");
    });
    !finishCount && setTimeout(function () {
      component.trigger("finish");
    });
    return component;
  }

  exports.check = check;
  exports.removeAutoSizer = remove;

}));
//# sourceMappingURL=lazyloaded.js.map
