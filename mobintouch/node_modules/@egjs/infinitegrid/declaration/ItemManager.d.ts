import { DiffResult } from "@egjs/list-differ";
import { CursorType, IInfiniteGridGroup, IInfiniteGridItem, IItemManagerStatus, IItem, IGroup } from "./types";
export default class ItemManager {
    static toItems(elements: HTMLElement[], groupKey: string | number): IInfiniteGridItem[];
    static pluck<A extends {
        [key: string]: any;
    }, B extends keyof A>(data: A[], property: B): A[B] extends any[] ? A[B] : Array<A[B]>;
    private _groups;
    private _groupKeys;
    clear(): void;
    getStatus(startKey?: string | number, endKey?: string | number): IItemManagerStatus;
    setStatus(status: IItemManagerStatus): void;
    size(): number;
    fit(base: number, horizontal: boolean): void;
    pluck<T extends keyof IInfiniteGridGroup>(property: T, start?: number, end?: number): IInfiniteGridGroup[T] extends any[] ? IInfiniteGridGroup[T] : IInfiniteGridGroup[T][];
    getOutline(index: number, property: keyof IInfiniteGridGroup["outlines"]): number[];
    getEdgeIndex(cursor: CursorType, start: number, end: number): number;
    getEdgeValue(cursor: CursorType, start: number, end: number): number;
    clearOutlines(startCursor?: number, endCursor?: number): void;
    getMaxEdgeValue(): number;
    prependGroup(group: IGroup): IInfiniteGridGroup | null;
    appendGroup(group: IGroup): IInfiniteGridGroup | null;
    insertGroup(group: IGroup, groupIndex: number): IInfiniteGridGroup | null;
    sync(items: IItem[]): DiffResult<IGroup>;
    insert(newItem: IItem, groupIndex?: number, itemIndex?: number): IInfiniteGridItem | null;
    removeGroup(groupIndex: number): IInfiniteGridGroup | null;
    remove(groupIndex: number, itemIndex: number): {
        items: IInfiniteGridItem[];
        group: IInfiniteGridGroup | null;
    };
    indexOf(data: {
        groupKey: string | number;
    } | string | number | undefined): number;
    indexesOfElement(element: HTMLElement): {
        groupIndex: number;
        itemIndex: number;
    };
    sliceGroups(start?: number, end?: number): IInfiniteGridGroup[];
    getGroups(): IInfiniteGridGroup[];
    getGroupByKey(key: number | string): IInfiniteGridGroup;
    getGroup(index: number): IInfiniteGridGroup;
    private syncItems;
}
